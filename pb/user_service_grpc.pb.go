// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: user_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthUserService_Login_FullMethodName                      = "/clientAuth.AuthUserService/Login"
	AuthUserService_Register_FullMethodName                   = "/clientAuth.AuthUserService/Register"
	AuthUserService_GetUserById_FullMethodName                = "/clientAuth.AuthUserService/GetUserById"
	AuthUserService_GetUserByUsername_FullMethodName          = "/clientAuth.AuthUserService/GetUserByUsername"
	AuthUserService_CheckUserIsExist_FullMethodName           = "/clientAuth.AuthUserService/CheckUserIsExist"
	AuthUserService_CheckUserIsExistByUsername_FullMethodName = "/clientAuth.AuthUserService/CheckUserIsExistByUsername"
)

// AuthUserServiceClient is the client API for AuthUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthUserServiceClient interface {
	Login(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	Register(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error)
	GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*GetUserByUsernameResponse, error)
	CheckUserIsExist(ctx context.Context, in *CheckUserIsExistRequest, opts ...grpc.CallOption) (*CheckUserIsExistResponse, error)
	CheckUserIsExistByUsername(ctx context.Context, in *CheckUserIsExistByUsernameRequest, opts ...grpc.CallOption) (*CheckUserIsExistByUsernameResponse, error)
}

type authUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthUserServiceClient(cc grpc.ClientConnInterface) AuthUserServiceClient {
	return &authUserServiceClient{cc}
}

func (c *authUserServiceClient) Login(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, AuthUserService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) Register(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, AuthUserService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByIdResponse)
	err := c.cc.Invoke(ctx, AuthUserService_GetUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*GetUserByUsernameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByUsernameResponse)
	err := c.cc.Invoke(ctx, AuthUserService_GetUserByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) CheckUserIsExist(ctx context.Context, in *CheckUserIsExistRequest, opts ...grpc.CallOption) (*CheckUserIsExistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUserIsExistResponse)
	err := c.cc.Invoke(ctx, AuthUserService_CheckUserIsExist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) CheckUserIsExistByUsername(ctx context.Context, in *CheckUserIsExistByUsernameRequest, opts ...grpc.CallOption) (*CheckUserIsExistByUsernameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUserIsExistByUsernameResponse)
	err := c.cc.Invoke(ctx, AuthUserService_CheckUserIsExistByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthUserServiceServer is the server API for AuthUserService service.
// All implementations should embed UnimplementedAuthUserServiceServer
// for forward compatibility.
type AuthUserServiceServer interface {
	Login(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	Register(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	GetUserById(context.Context, *GetUserByIdRequest) (*GetUserByIdResponse, error)
	GetUserByUsername(context.Context, *GetUserByUsernameRequest) (*GetUserByUsernameResponse, error)
	CheckUserIsExist(context.Context, *CheckUserIsExistRequest) (*CheckUserIsExistResponse, error)
	CheckUserIsExistByUsername(context.Context, *CheckUserIsExistByUsernameRequest) (*CheckUserIsExistByUsernameResponse, error)
}

// UnimplementedAuthUserServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthUserServiceServer struct{}

func (UnimplementedAuthUserServiceServer) Login(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthUserServiceServer) Register(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthUserServiceServer) GetUserById(context.Context, *GetUserByIdRequest) (*GetUserByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedAuthUserServiceServer) GetUserByUsername(context.Context, *GetUserByUsernameRequest) (*GetUserByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUsername not implemented")
}
func (UnimplementedAuthUserServiceServer) CheckUserIsExist(context.Context, *CheckUserIsExistRequest) (*CheckUserIsExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserIsExist not implemented")
}
func (UnimplementedAuthUserServiceServer) CheckUserIsExistByUsername(context.Context, *CheckUserIsExistByUsernameRequest) (*CheckUserIsExistByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserIsExistByUsername not implemented")
}
func (UnimplementedAuthUserServiceServer) testEmbeddedByValue() {}

// UnsafeAuthUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthUserServiceServer will
// result in compilation errors.
type UnsafeAuthUserServiceServer interface {
	mustEmbedUnimplementedAuthUserServiceServer()
}

func RegisterAuthUserServiceServer(s grpc.ServiceRegistrar, srv AuthUserServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthUserService_ServiceDesc, srv)
}

func _AuthUserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).Login(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).Register(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).GetUserById(ctx, req.(*GetUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_GetUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).GetUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_GetUserByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).GetUserByUsername(ctx, req.(*GetUserByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_CheckUserIsExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserIsExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).CheckUserIsExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_CheckUserIsExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).CheckUserIsExist(ctx, req.(*CheckUserIsExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_CheckUserIsExistByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserIsExistByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).CheckUserIsExistByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_CheckUserIsExistByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).CheckUserIsExistByUsername(ctx, req.(*CheckUserIsExistByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthUserService_ServiceDesc is the grpc.ServiceDesc for AuthUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clientAuth.AuthUserService",
	HandlerType: (*AuthUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthUserService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthUserService_Register_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _AuthUserService_GetUserById_Handler,
		},
		{
			MethodName: "GetUserByUsername",
			Handler:    _AuthUserService_GetUserByUsername_Handler,
		},
		{
			MethodName: "CheckUserIsExist",
			Handler:    _AuthUserService_CheckUserIsExist_Handler,
		},
		{
			MethodName: "CheckUserIsExistByUsername",
			Handler:    _AuthUserService_CheckUserIsExistByUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_service.proto",
}
